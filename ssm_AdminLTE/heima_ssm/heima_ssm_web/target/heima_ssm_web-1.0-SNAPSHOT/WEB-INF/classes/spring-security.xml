<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:security="http://www.springframework.org/schema/security"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/security
    http://www.springframework.org/schema/security/spring-security.xsd">

	<!-- 配置不拦截的资源 -->
	<security:http pattern="/login.jsp" security="none"/>
	<security:http pattern="/failer.jsp" security="none"/>
	<security:http pattern="/css/**" security="none"/>
	<security:http pattern="/img/**" security="none"/>
	<security:http pattern="/plugins/**" security="none"/>
	<security:http pattern="/favicon.ico" security="none"/>


	<!--配置文件 开启注解权限控制 默认值都是disabled 使用都需修改-->
	<!--jsr250的开启注解权限的配置-->
	<!--<security:global-method-security jsr250-annotations="enabled"/>-->
	<!--@secured开启注解权限配置-->
	<!--<security:global-method-security secured-annotations="enabled"/>-->
	<!--支持表达式开启注解权限配置-->
	<security:global-method-security pre-post-annotations="enabled"/>
	<!--
        配置具体的规则
        auto-config="true"	不用自己编写登录的页面，框架提供默认登录页面
        use-expressions="false"	是否使用SPEL表达式（没学习过）在使用页面端控制时需要改为true，并且access中的值有一个需要加hasRole，多个的需要加hasAnyRole
    -->
	<security:http auto-config="true" use-expressions="true" >
		<!-- 配置具体的拦截的规则 pattern="请求路径的规则" access="访问系统的人，必须有ROLE_USER的角色" -->
		<security:intercept-url pattern="/**" access="hasAnyRole('ROLE_USER','ROLE_ADMIN')"/>

		<!-- 定义跳转的具体的页面 -->
		<security:form-login
				login-page="/login.jsp"
				login-processing-url="/login.do"
				default-target-url="/index.jsp"
				authentication-failure-url="/failer.jsp"
				always-use-default-target="true"
		/>

		<!-- 关闭跨域请求 -->
		<security:csrf disabled="true"/>

		<!-- 退出 -->
		<security:logout invalidate-session="true" logout-url="/logout.do" logout-success-url="/login.jsp" />

	</security:http>

	<!-- 切换成数据库中的用户名和密码 -->
	<security:authentication-manager>
		<security:authentication-provider user-service-ref="userService">
			<!-- 配置加密的方式 -->
			<security:password-encoder ref="passwordEncoder"/>
		</security:authentication-provider>
	</security:authentication-manager>

	<!-- 配置加密类 -->
	<bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>

	<!-- 提供了入门的方式，在内存中存入用户名和密码
    <security:authentication-manager>
        <security:authentication-provider>
            <security:user-service>
                <security:user name="admin" password="{noop}admin" authorities="ROLE_USER"/>
            </security:user-service>
        </security:authentication-provider>
    </security:authentication-manager>
    -->

</beans>

 
 
 
 
 
 
 
 
 
 
 
 